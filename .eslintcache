[{"C:\\Users\\tmead\\git-test\\my-app\\src\\index.js":"1","C:\\Users\\tmead\\git-test\\my-app\\src\\App.js":"2","C:\\Users\\tmead\\git-test\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\MenuComponent.js":"4","C:\\Users\\tmead\\git-test\\my-app\\src\\shared\\dishes.js":"5","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\DishdetailComponent.js":"6","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\MainComponent.js":"7","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\HeaderComponent.js":"8","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\FooterComponent.js":"9","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\HomeComponent.js":"10","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\ContactComponent.js":"11","C:\\Users\\tmead\\git-test\\my-app\\src\\shared\\leaders.js":"12","C:\\Users\\tmead\\git-test\\my-app\\src\\shared\\comments.js":"13","C:\\Users\\tmead\\git-test\\my-app\\src\\shared\\promotions.js":"14","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\AboutComponent.js":"15","C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\configureStore.js":"16","C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\comments.js":"17","C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\leaders.js":"18","C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\dishes.js":"19","C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\promotions.js":"20","C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\ActionTypes.js":"21","C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\ActionCreators.js":"22","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\LoadingComponent.js":"23","C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\forms.js":"24","C:\\Users\\tmead\\git-test\\my-app\\src\\shared\\baseUrl.js":"25"},{"size":659,"mtime":1609260454267,"results":"26","hashOfConfig":"27"},{"size":501,"mtime":1610329342572,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"27"},{"size":1624,"mtime":1610768200068,"results":"30","hashOfConfig":"27"},{"size":1490,"mtime":1609444791399,"results":"31","hashOfConfig":"27"},{"size":5561,"mtime":1610768404988,"results":"32","hashOfConfig":"27"},{"size":3008,"mtime":1610767811129,"results":"33","hashOfConfig":"27"},{"size":4509,"mtime":1610126128292,"results":"34","hashOfConfig":"27"},{"size":2639,"mtime":1609263786472,"results":"35","hashOfConfig":"27"},{"size":1319,"mtime":1610769289955,"results":"36","hashOfConfig":"27"},{"size":10164,"mtime":1610732590668,"results":"37","hashOfConfig":"27"},{"size":2382,"mtime":1609444872481,"results":"38","hashOfConfig":"27"},{"size":4279,"mtime":1609444879073,"results":"39","hashOfConfig":"27"},{"size":445,"mtime":1609444866039,"results":"40","hashOfConfig":"27"},{"size":4233,"mtime":1609610100576,"results":"41","hashOfConfig":"27"},{"size":788,"mtime":1610732634868,"results":"42","hashOfConfig":"27"},{"size":682,"mtime":1610767600095,"results":"43","hashOfConfig":"27"},{"size":161,"mtime":1610555419049,"results":"44","hashOfConfig":"27"},{"size":598,"mtime":1610727134845,"results":"45","hashOfConfig":"27"},{"size":683,"mtime":1610767613937,"results":"46","hashOfConfig":"27"},{"size":411,"mtime":1610765882785,"results":"47","hashOfConfig":"27"},{"size":1848,"mtime":1610767276922,"results":"48","hashOfConfig":"27"},{"size":255,"mtime":1610727560570,"results":"49","hashOfConfig":"27"},{"size":170,"mtime":1610732949165,"results":"50","hashOfConfig":"27"},{"size":48,"mtime":1610765845672,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"318off",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"C:\\Users\\tmead\\git-test\\my-app\\src\\index.js",[],["110","111"],"C:\\Users\\tmead\\git-test\\my-app\\src\\App.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\components\\MenuComponent.js",["112","113"],"import React from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\t\r\n\r\nfunction RenderMenuItem({dish, onClick}){\r\n\treturn(\r\n\t\t<Card>\r\n\t\t\t<Link to={`/menu/${dish.id}`} >\r\n\t\t\t\t<CardImg width=\"100%\" src={baseUrl + dish.image} alt={dish.name} />\r\n\t\t\t\t<CardImgOverlay>\r\n\t\t\t\t\t<CardTitle>{dish.name}</CardTitle>\r\n\t\t\t\t</CardImgOverlay>\r\n\t\t\t</Link>\r\n        </Card>\r\n\t);\r\n}\r\n\r\nconst Menu = (props) => {\r\n\t  const menu = props.dishes.dishes.map((dish) => {\r\n            return (\r\n              <div key={dish.id} className=\"col-12 col-md-5 m-1\">\r\n\t\t\t\t\t<RenderMenuItem dish={dish}/>\r\n              </div>\r\n            );\r\n\t\t});\r\n\t\t\r\n\t\tif(props.dishes.isLoading){\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<Loading />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse if( props.dishes.errMess){\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<h4>{props.dishes.errMess}</h4>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse \r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<Breadcrumb>\r\n\t\t\t\t\t\t\t<BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n\t\t\t\t\t\t\t<BreadcrumbItem active>Menu</BreadcrumbItem>\r\n\t\t\t\t\t\t</Breadcrumb>\r\n\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t<h3>Menu</h3>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t{menu}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n}\r\n      \r\n\r\n\r\n\r\n\r\nexport default Menu;","C:\\Users\\tmead\\git-test\\my-app\\src\\shared\\dishes.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\components\\DishdetailComponent.js",["114","115","116","117","118","119"],"import React, { Component } from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem, Button, Modal, ModalHeader, ModalBody, Form, Row, Input, Label, Col} from 'reactstrap';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\nclass CommentForm extends Component{\r\n\tconstructor(props) {\r\n        super(props);\r\n\t\t\r\n\t\tthis.toggleModal = this.toggleModal.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n\t\t\tisModalOpen: false\r\n        };\r\n    }\r\n\t\t\r\n\t  toggleModal() {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisModalOpen: !this.state.isModalOpen,\r\n\t\t\t});\r\n\t\t}\r\n\t  \r\n\thandleSubmit(values){\r\n\t\tthis.toggleModal();\r\n\t\tthis.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\r\n\t}\r\n\t\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div >\r\n\t\t\t\t<Button type=\"submit\" color=\"secondary\" outline onClick={this.toggleModal}>\r\n\t\t\t\t\t<span className=\"fa fa-pencil fa-lg\"> Submit Comment </span>\r\n\t\t\t\t</Button>\r\n\t\t\t\t\r\n\t\t\t\t<Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                    <ModalBody>\r\n\t\t\t\t\t\t\t<LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n\t\t\t\t\t\t\t\t<Row className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<Col md={12}>\r\n\t\t\t\t\t\t\t\t\t\t<Label htmlFor=\"rating\">Rating</Label>\r\n\t\t\t\t\t\t\t\t\t\t<Control.select model=\".rating\" name=\"rating\" className=\"form-control\">\r\n\t\t\t\t\t\t\t\t\t\t\t<option>1</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option>2</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option>3</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option>4</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option>5</option>\r\n\t\t\t\t\t\t\t\t\t\t</Control.select>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t<Row className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<Col md={12}>\r\n\t\t\t\t\t\t\t\t\t\t<Label htmlFor=\"author\">Your Name</Label>\r\n\t\t\t\t\t\t\t\t\t\t<Control.text model=\".author\" id=\"author\" name=\"author\"\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Your Name\"\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalidators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n\t\t\t\t\t\t\t\t\t\t\t}} />\r\n\t\t\t\t\t\t\t\t\t\t<Errors\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"text-danger\"\r\n\t\t\t\t\t\t\t\t\t\t\tmodel=\".author\"\r\n\t\t\t\t\t\t\t\t\t\t\tshow=\"touched\"\r\n\t\t\t\t\t\t\t\t\t\t\tmessages={{\r\n\t\t\t\t\t\t\t\t\t\t\t\trequired: 'Required: ',\r\n\t\t\t\t\t\t\t\t\t\t\t\tminLength: 'Must be greater than 2 characters',\r\n\t\t\t\t\t\t\t\t\t\t\t\tmaxLength: 'Must be 15 characters or less'\r\n                                        }}/>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t<Row className=\"for-group\">\r\n\t\t\t\t\t\t\t\t\t<Col md={12}>\r\n\t\t\t\t\t\t\t\t\t\t<Label htmlFor=\"comment\">Comment</Label>\r\n\t\t\t\t\t\t\t\t\t\t<Control.textarea model=\".comment\" id=\"comment\" name=\"comment\" rows=\"6\"\r\n                                        className=\"form-control\" />\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t<Row className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<Col md={{size:12}}>\r\n\t\t\t\t\t\t\t\t\t\t<Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t</LocalForm>\r\n\t\t\t\t\t</ModalBody>\r\n                </Modal>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n}\r\n\r\n\tfunction RenderDish({dish}){\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"col-12 col-md-5 m-1\">\r\n\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t<CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n\t\t\t\t\t\t<CardBody>\r\n\t\t\t\t\t\t\t<CardTitle>{dish.name}</CardTitle>\r\n\t\t\t\t\t\t\t<CardText>{dish.description}</CardText>\r\n\t\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\t\r\n\t}\r\n\t\r\n\tfunction RenderComments({comments, addComment, dishId}){\r\n\t\t\r\n\t\tif(comments != null)\r\n\t\t\treturn(\r\n\t\t\t\t<div className =\"col-12 col-md-5 m-1\">\r\n\t\t\t\t\t<h1>Comments</h1>\r\n\t\t\t\t\t<ul className=\"list-unstyled\">\r\n\t\t\t\t\t\t{comments.map((comment) => {\r\n\t\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t\t<li key={comment.id}>\r\n\t\t\t\t\t\t\t\t\t\t<p>{comment.comment} , {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n\t\t\t\t\t\t\t\t\t\t<p> -- {comment.author}</p>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t<div className=\"col-12 col-md-5 m-1\">\r\n\t\t\t\t\t\t<CommentForm dishId={dishId} addComment={addComment}>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</CommentForm>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t);\r\n\t\t\t\r\n\t}\t\r\n\t\r\n\t\r\n\r\n\tconst DishDetail = (props) => {\r\n\t\t\r\n\t\tconsole.log('DishDetail Component render invoked');\r\n\t\t\r\n\t\tif(props.isLoading){\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<Loading />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse if( props.errMess){\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<h4>{props.errMess}</h4>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse if(props.dish != null)\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<Breadcrumb>\r\n\t\t\t\t\t\t<BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n\t\t\t\t\t\t<BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n\t\t\t\t\t</Breadcrumb>\r\n\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t<h3>{props.dish.name}</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<RenderDish dish={props.dish} />\r\n\t\t\t\t\t\t<RenderComments comments={props.comments}\r\n\t\t\t\t\t\t\taddComment={props.addComment}\r\n\t\t\t\t\t\t\tdishId={props.dish.id}/>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\telse\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t);\r\n\t\t\r\n\t}\r\n\r\n\r\n\r\nexport default DishDetail;","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\MainComponent.js",["120"],"import React, { Component } from 'react';\r\n\r\nimport Menu from './MenuComponent';\r\nimport DishDetail from './DishdetailComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport Home from './HomeComponent';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addComment, fetchDishes, fetchComments, fetchPromos } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn{\r\n\t\tdishes: state.dishes,\r\n\t\tcomments: state.comments,\r\n\t\tpromotions: state.promotions,\r\n\t\tleaders: state.leaders\r\n\t}\r\n}\r\n\t\r\nconst mapDispatchToProps = dispatch => ({\r\n\taddComment: (dishId, rating, author, comment) => dispatch(addComment(dishId, rating, author, comment)),\r\n\tfetchDishes: () => {dispatch(fetchDishes())},\r\n\tresetFeedbackForm: () => { dispatch(actions.reset('feedback'))},\r\n\tfetchComments: () => dispatch(fetchComments()),\r\n  \tfetchPromos: () => dispatch(fetchPromos())\r\n});\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n\t  this.props.fetchDishes();\r\n\t  this.props.fetchComments();\r\n\t  this.props.fetchPromos();\r\n  }\r\n\r\n\r\n  \r\n  render() {\r\n\t\r\n\tconst HomePage = () => {\r\n\t\treturn(\r\n\t\t\t<Home \r\n\t\t\t\tdish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n\t\t\t\tdishesLoading={this.props.dishes.isLoading}\r\n\t\t\t\tdishErrMess={this.props.dishes.errMess}\r\n\t\t\t\tpromotion={this.props.promotions.promotions.filter((promo) => promo.featured)[0]}\r\n\t\t\t\tpromoLoading={this.props.promotions.isLoading}\r\n\t\t\t\tpromoErrMess={this.props.promotions.errMess}\r\n\t\t\t\tleader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\t\r\n\tconst DishWithId = ({match}) => {\r\n\t\treturn(\r\n\t\t\t<DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\r\n           \t \tisLoading={this.props.dishes.isLoading}\r\n           \t \terrMess={this.props.dishes.errMess}\r\n           \t \tcomments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\r\n           \t \tcommentsErrMess={this.props.comments.errMess}\r\n           \t \taddComment={this.props.addComment}\r\n         \t />\r\n\t\t);\r\n\t}\r\n\t\r\n    return (\r\n      <div>\r\n\t\t<Header />\r\n\t\t<Switch>\r\n\t\t\t<Route path=\"/home\" component={HomePage} />\r\n\t\t\t<Route exact path=\"/menu\" component={() => <Menu dishes={this.props.dishes} />} />\r\n\t\t\t<Route path=\"/menu/:dishId\" component={DishWithId} />\r\n\t\t\t<Route exact path='/contactus' component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} />} />\r\n\t\t\t<Route exact path=\"/aboutus\" component={() => <About leaders={this.props.leaders} />} />\r\n\t\t\t<Redirect to=\"/home\" />\r\n\t\t</Switch>\r\n\t\t<Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\HeaderComponent.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\components\\FooterComponent.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\components\\HomeComponent.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\components\\ContactComponent.js",["121","122","123","124","125","126","127","128","129","130","131"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, FormGroup, Label, Input, Col, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, Form, Errors, Actions } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t}\r\n\t\t\r\n\thandleSubmit(values){\r\n\t\tconsole.log('Current State is: ' + JSON.stringify(values));\r\n        alert('Current State is: ' + JSON.stringify(values));\r\n        this.props.resetFeedbackForm();\r\n\t}\r\n\t\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<Breadcrumb>\r\n\t\t\t\t\t\t\t<BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n\t\t\t\t\t\t\t<BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n\t\t\t\t\t\t</Breadcrumb>\r\n\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t<h3>Contact Us</h3>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"row row-content\">\r\n\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t<h3>Location Information</h3>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"col-12 col-sm-4 offset-sm-1\">\r\n\t\t\t\t\t\t\t<h5>Our Address</h5>\r\n\t\t\t\t\t\t\t<address>\r\n\t\t\t\t\t\t\t121, Clear Water Bay Road<br />\r\n\t\t\t\t\t\t\tClear Water Bay, Kowloon<br />\r\n\t\t\t\t\t\t\tHONG KONG<br />\r\n\t\t\t\t\t\t\t<i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n\t\t\t\t\t\t\t<i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n\t\t\t\t\t\t\t<i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n\t\t\t\t\t\t\t</address>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-12 col-sm-6 offset-sm-1\">\r\n\t\t\t\t\t\t<h5>Map of our Location</h5>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-12 col-sm-11 offset-sm-1\">\r\n\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\r\n\t\t\t\t\t\t\t<a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n\t\t\t\t\t\t\t<a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n\t\t\t\t\t\t\t<a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row row-content\">\r\n\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t<h3>Send us Your Feedback</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-12 col-md-9\">\r\n                        <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                           <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\"\r\n                                                 /> {' '}\r\n                                                <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                    Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t\r\n\t}\r\n    \r\n}\r\n\r\nexport default Contact;","C:\\Users\\tmead\\git-test\\my-app\\src\\shared\\leaders.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\shared\\comments.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\shared\\promotions.js",[],["132","133"],"C:\\Users\\tmead\\git-test\\my-app\\src\\components\\AboutComponent.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\configureStore.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\comments.js",["134"],"import { COMMENTS } from '../shared/comments';\r\nimport * as ActionTypes from './ActionTypes';\r\n\r\nexport const Comments = (state = { errMess: null, comments:[]}, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.ADD_COMMENTS:\r\n      return {...state, errMess: null, comments: action.payload};\r\n\r\n    case ActionTypes.COMMENTS_FAILED:\r\n      return {...state, errMess: action.payload};\r\n\r\n    case ActionTypes.ADD_COMMENT:\r\n        var comment = action.payload;\r\n        comment.id = state.comments.length;\r\n        comment.date = new Date().toISOString();\r\n        return { ...state, comments: state.comments.concat(comment)};\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};","C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\leaders.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\dishes.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\promotions.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\ActionTypes.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\ActionCreators.js",["135"],"import * as ActionTypes from './ActionTypes';\r\nimport { DISHES } from '../shared/dishes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nexport const addComment = (dishId, rating, author, comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    }\r\n});\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n    .then(response => response.json())\r\n    .then(dishes => dispatch(addDishes(dishes)));\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {    \r\n    return fetch(baseUrl + 'comments')\r\n    .then(response => response.json())\r\n    .then(comments => dispatch(addComments(comments)));\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n    \r\n    dispatch(promosLoading());\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)));\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});","C:\\Users\\tmead\\git-test\\my-app\\src\\components\\LoadingComponent.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\redux\\forms.js",[],"C:\\Users\\tmead\\git-test\\my-app\\src\\shared\\baseUrl.js",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":2,"column":41,"nodeType":"142","messageId":"143","endLine":2,"endColumn":49},{"ruleId":"140","severity":1,"message":"144","line":2,"column":51,"nodeType":"142","messageId":"143","endLine":2,"endColumn":59},{"ruleId":"140","severity":1,"message":"145","line":2,"column":25,"nodeType":"142","messageId":"143","endLine":2,"endColumn":39},{"ruleId":"140","severity":1,"message":"146","line":2,"column":139,"nodeType":"142","messageId":"143","endLine":2,"endColumn":143},{"ruleId":"140","severity":1,"message":"147","line":2,"column":150,"nodeType":"142","messageId":"143","endLine":2,"endColumn":155},{"ruleId":"148","severity":1,"message":"149","line":49,"column":11,"nodeType":"150","endLine":49,"endColumn":82},{"ruleId":"148","severity":1,"message":"151","line":61,"column":11,"nodeType":"150","endLine":66,"endColumn":17},{"ruleId":"148","severity":1,"message":"152","line":81,"column":11,"nodeType":"150","endLine":82,"endColumn":68},{"ruleId":"153","severity":1,"message":"154","line":34,"column":3,"nodeType":"155","messageId":"156","endLine":37,"endColumn":4},{"ruleId":"140","severity":1,"message":"157","line":2,"column":46,"nodeType":"142","messageId":"143","endLine":2,"endColumn":55},{"ruleId":"140","severity":1,"message":"147","line":2,"column":64,"nodeType":"142","messageId":"143","endLine":2,"endColumn":69},{"ruleId":"140","severity":1,"message":"158","line":4,"column":33,"nodeType":"142","messageId":"143","endLine":4,"endColumn":40},{"ruleId":"159","severity":1,"message":"160","line":58,"column":8,"nodeType":"150","endLine":58,"endColumn":50},{"ruleId":"148","severity":1,"message":"151","line":72,"column":37,"nodeType":"150","endLine":78,"endColumn":44},{"ruleId":"148","severity":1,"message":"151","line":94,"column":37,"nodeType":"150","endLine":100,"endColumn":44},{"ruleId":"148","severity":1,"message":"151","line":116,"column":37,"nodeType":"150","endLine":122,"endColumn":44},{"ruleId":"148","severity":1,"message":"151","line":139,"column":37,"nodeType":"150","endLine":145,"endColumn":44},{"ruleId":"148","severity":1,"message":"161","line":161,"column":45,"nodeType":"150","endLine":163,"endColumn":52},{"ruleId":"148","severity":1,"message":"149","line":169,"column":37,"nodeType":"150","endLine":170,"endColumn":66},{"ruleId":"148","severity":1,"message":"152","line":179,"column":37,"nodeType":"150","endLine":181,"endColumn":68},{"ruleId":"136","replacedBy":"162"},{"ruleId":"138","replacedBy":"163"},{"ruleId":"140","severity":1,"message":"164","line":1,"column":10,"nodeType":"142","messageId":"143","endLine":1,"endColumn":18},{"ruleId":"140","severity":1,"message":"165","line":2,"column":10,"nodeType":"142","messageId":"143","endLine":2,"endColumn":16},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"no-unused-vars","'CardText' is defined but never used.","Identifier","unusedVar","'CardBody' is defined but never used.","'CardImgOverlay' is defined but never used.","'Form' is defined but never used.","'Input' is defined but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'FormGroup' is defined but never used.","'Actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["166"],["167"],"'COMMENTS' is defined but never used.","'DISHES' is defined but never used.","no-global-assign","no-unsafe-negation"]